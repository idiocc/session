<types namespace="_idio">
  <type interface name="KoaContextSession" description="The context for the session API. Is actually private, as only accessible from context by a symbol.">
    <prop type="_goa.Context" name="ctx">
      The context.
    </prop>
    <prop type="function(): !Promise" name="commit">
      Commit the session changes or removal.
    </prop>
  </type>

  <type interface name="ContextStore" description="new ContextStore(ctx) will be executed on every request.">
    <prop type="!Function" name="get">
      Get session object by key.
    </prop>
    <prop type="!Function" name="set">
      Set session object for key, with a `maxAge` (in ms).
    </prop>
    <prop type="!Function" name="destroy">
      Destroy session for key.
    </prop>
  </type>

  <type name="KoaSessionConfig" desc="Configuration passed to `koa-session`." noToc>
    <prop string name="key" default="koa:sess">
      Cookie key.
    </prop>
    <prop type="string|number" name="maxAge" default="86400000">
      `maxAge` in ms with default of 1 day. Either a number or 'session'. `session` will result in a cookie that expires when session/browser is closed. Warning: If a session cookie is stolen, this cookie will never expire.
    </prop>
    <prop boolean name="overwrite" default="true">
      Can overwrite or not.
    </prop>
    <prop boolean name="httpOnly" default="true">
      httpOnly or not.
    </prop>
    <prop boolean name="signed" default="true">
      Signed or not.
    </prop>
    <prop boolean name="autoCommit" default="true">
      Automatically commit headers.
    </prop>
    <prop type="function(_goa.Context, ?): boolean" name="valid">
      The validation hook: valid session value before use it.
    </prop>
    <prop type="function(_goa.Context, _idio.KoaSession): boolean" name="beforeSave">
      The hook before save session.
    </prop>
    <prop type="function(): string" name="genid" default="uuid-v4">
      The way of generating external session id.
    </prop>
    <prop opt type="{ get: !Function, set: !Function, destroy: !Function }" name="store">
      You can store the session content in external stores (Redis, MongoDB or other DBs) by passing options.store with three methods (these need to be async functions).
    </prop>
    <prop opt type="{ get: !Function, set: !Function }" name="externalKey">
      External key is used the cookie by default, but you can use options.externalKey to customize your own external key methods.
    </prop>
    <prop opt type="_idio.ContextStore" name="ContextStore">
      If your session store requires data or utilities from context, `opts.ContextStore` is also supported.
    </prop>
    <prop opt string name="prefix">
      If you want to add prefix for all external session id, it will not work if `options.genid(ctx)` present.
    </prop>
    <prop opt type="!Function" name="encode">
      Use options.encode and options.decode to customize your own encode/decode methods.
    </prop>
    <prop opt type="!Function" name="decode">
      Use options.encode and options.decode to customize your own encode/decode methods.
    </prop>
    <prop boolean name="rolling" default="false">
      Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown.
    </prop>
    <prop boolean name="renew" default="false">
      Renew session when session is nearly expired, so we can always keep user logged in.
    </prop>
  </type>
</types>