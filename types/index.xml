<types namespace="_idio">
  <interface name="KoaContextSession" description="The context for the session API. Is actually private, as only accessible from context by a symbol.">
    <prop type="!_goa.Context" name="ctx">
      The context.
    </prop>
    <fn async name="commit">
      Commit the session changes or removal.
    </fn>
  </interface>

  <interface name="ContextStore" description="new ContextStore(ctx) will be executed on every request.">
    <fn async return="!Object" name="get">
      <arg string name="key">The session key.</arg>
      <arg type="number|string" name="maxAge">The max age.</arg>
      <arg type="{ rolling: boolean }" name="opts">
        Additional options.
      </arg>
      Get session object by key.
    </fn>
    <fn async name="set">
      <arg string name="key">The session key.</arg>
      <arg type="!Object" name="sess">The object to set.</arg>
      <arg type="number|string" name="maxAge">The max age.</arg>
      <arg type="{ rolling: boolean, changed: boolean }" name="opts">
        Additional options.
      </arg>
      Set session object for key, with a `maxAge` (in ms, or as `'session'`).
    </fn>
    <fn async name="destroy">
      <arg string name="key">The key.</arg>
      Destroy session for key.
    </fn>
  </interface>

  <record name="KoaSessionConfig" desc="Configuration passed to `koa-session`." noToc>
    <prop string name="key" default="koa:sess">
      The cookie key.
    </prop>
    <prop type="string|number" name="maxAge" default="86400000">
      `maxAge` in ms with default of 1 day. Either a number or 'session'. `session` will result in a cookie that expires when session/browser is closed. Warning: If a session cookie is stolen, this cookie will never expire.
    </prop>
    <prop boolean name="overwrite" default="true">
      Can overwrite or not.
    </prop>
    <prop boolean name="httpOnly" default="true">
      httpOnly or not.
    </prop>
    <prop boolean name="signed" default="true">
      Signed or not.
    </prop>
    <prop boolean name="autoCommit" default="true">
      Automatically commit headers.
    </prop>
    <fn opt return="boolean" name="valid">
      <arg type="!_goa.Context" name="ctx">The context.</arg>
      <arg type="!Object" name="sess">The session to validate.</arg>
      The validation hook: valid session value before use it.
    </fn>
    <fn opt return="boolean" name="beforeSave">
      <arg type="!_goa.Context" name="ctx">The context.</arg>
      <arg type="!_idio.KoaSession" name="ctx">The session.</arg>
      The hook before save session.
    </fn>
    <fn return="string" name="genid" default="uuid-v4">
      <arg type="!_goa.Context" name="ctx">The context.</arg>
      The way of generating external session id.
    </fn>
    <prop opt type="_idio.ContextStore" name="store">
      You can store the session content in external stores (Redis, MongoDB or other DBs) by passing options.store with three methods (these need to be async functions).
    </prop>
    <prop opt type="{ get: function(_goa.Context), set: function(_goa.Context, string) }" name="externalKey">
      External key is used the cookie by default, but you can use options.externalKey to customize your own external key methods.
    </prop>
    <prop opt type="new (ctx:_goa.Context) => _idio.ContextStore" closure="function(new: _idio.ContextStore, !_goa.Context)" name="ContextStore">
      If your session store requires data or utilities from context, `opts.ContextStore` is also supported.
    </prop>
    <prop opt string name="prefix">
      If you want to add prefix for all external session id. It will not work if `options.genid(ctx)` present.
    </prop>
    <fn opt return="string" name="encode">
      <arg type="!Object" name="sess">The session object to encode.</arg>
      Use options.encode and options.decode to customize your own encode/decode methods.
    </fn>
    <prop opt return="!Object" name="decode">
    <arg type="string" name="sess">The session object to decode.</arg>
      Use options.encode and options.decode to customize your own encode/decode methods.
    </prop>
    <prop boolean name="rolling" default="false">
      Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown.
    </prop>
    <prop boolean name="renew" default="false">
      Renew session when session is nearly expired, so we can always keep user logged in.
    </prop>
  </record>
</types>